import CodeBlockWriter from 'code-block-writer';

import { createCodeWriters } from '../../helpers';
import { ComponentStructure } from '../../types';

interface TableOptions {
    columnsVarName: string;
    dataVarName: string;

    renderHeader: boolean;
    clickableRows: boolean;
    selectableRows: boolean;
}

export const generateTable = (options: TableOptions): ComponentStructure => {
    const { hooks, render } = createCodeWriters();

    const imports = new Map<string, string[]>();

    hooks.writeLine('const autoGeneratedColumns = useAutoColumns(meta);');
    hooks.writeLine('const columns = useMemo<typeof autoGeneratedColumns>(');
    hooks.writeLine('   () => [');

    if (options.selectableRows) {
        hooks.writeLine('       getSelectColumns(),');
    }

    hooks.writeLine('       ...autoGeneratedColumns,');
    hooks.writeLine('       getSettingsColumn({ columnsToDisable: [], defaultVisibleColumns: meta?.default_list }),');
    hooks.writeLine('   ],');
    hooks.writeLine('   [autoGeneratedColumns, meta?.default_list]');
    hooks.writeLine(');');

    render.writeLine('<Table');
    render.writeLine(`columns={${options.columnsVarName}}`);
    render.writeLine(`data={${options.dataVarName}}`);

    if (options.renderHeader) {
        render.writeLine(`renderHeader={renderHeader}`);
    }

    if (!options.selectableRows) {
        render.writeLine(`allowRowSelect={false}`);
    }

    render.writeLine('/>');

    return {
        imports: [...imports.entries()].reduce((acc, cur) => {
            acc[cur[0]] = cur[1];
            return acc;
        }, {} as Record<string, string[]>),
        hooksCode: hooks.toString(),
        renderCode: render.toString(),
    };
};
